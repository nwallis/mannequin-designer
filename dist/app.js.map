{"version":3,"sources":["app/designer/joint.shapes.qad.js","app/designer/selection.js","app/designer/factory.js","app/designer/app.js","app/designer/helpers.js","app/designer/index.js","app/designer/model_editor.js"],"names":[],"mappingspnnaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CClvYA","file":"dist/app.js","sourcesContent":["/*! Rappid v2.1.0 - HTML5 Diagramming Framework - TRIAL VERSION\n\nCopyright (c) 2015 client IO\n\n 2017-09-14 \n\n\nThis Source Code Form is subject to the terms of the Rappid Trial License\n, v. 2.0. If a copy of the Rappid License was not distributed with this\nfile, You can obtain one at http://jointjs.com/license/rappid_v2.txt\n or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/\nvar joint = require('js/lib/rappid.min.js');\n\njoint.shapes.qad = {};\n\njoint.util.measureText = function(text, attrs) {\n\n    var fontSize = parseInt(attrs.fontSize, 10) || 10;\n\n    var svgDocument = V('svg').node;\n    var textElement = V('<text><tspan></tspan></text>').node;\n    var textSpan = textElement.firstChild;\n    var textNode = document.createTextNode('');\n\n    textSpan.appendChild(textNode);\n    svgDocument.appendChild(textElement);\n    document.body.appendChild(svgDocument);\n\n    var lines = text.split('\\n');\n    var width = 0;\n\n    // Find the longest line width.\n    _.each(lines, function(line) {\n\n        textNode.data = line;\n        var lineWidth = textSpan.getComputedTextLength();\n\n        width = Math.max(width, lineWidth);\n    });\n\n    var height = lines.length * (fontSize * 1.2);\n\n    V(svgDocument).remove();\n\n    return {\n        width: width,\n        height: height\n    };\n};\n\njoint.shapes.qad.TriggerView = joint.dia.ElementView.extend({\n    events: {\n        'click .btn-remove-trigger': 'onRemoveTrigger',\n    },\n    initialize: function(e) {\n        joint.dia.ElementView.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, 'change:parent', this.autoresize, this);\n    },\n    autoresize: function() {\n        if (this.getParent()) {\n            var parentBounds = this.getParent().getBBox();\n            this.model.resize(parentBounds.width, 30);\n        }\n    },\n    getParent: function() {\n        return this.model.graph.getCell(this.model.attributes.parent);\n    },\n    onRemoveTrigger: function(evt) {\n        evt.stopPropagation();\n        this.getParent().removeTrigger(this.model.id);\n        this.getParent().unembed(this.model);\n        this.remove();\n    }\n});\n\njoint.shapes.qad.ModifierView = joint.dia.ElementView.extend({\n    events: {\n        'click .btn-remove-modifier': 'onRemoveModifier',\n    },\n    initialize: function(e) {\n        joint.dia.ElementView.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, 'change:parent', this.autoresize, this);\n    },\n    autoresize: function() {\n        if (this.getParent()) {\n            var parentBounds = this.getParent().getBBox();\n            this.model.resize(parentBounds.width, 30);\n        }\n    },\n    getParent: function() {\n        return this.model.graph.getCell(this.model.attributes.parent);\n    },\n    onRemoveModifier: function(evt) {\n        this.getParent().removeModifier(this.model.id);\n        this.getParent().unembed(this.model);\n        this.remove();\n    }\n});\n\njoint.shapes.qad.QuestionView = joint.dia.ElementView.extend({\n\n    events: {\n        'click .btn-add-modifier': 'onAddModifier',\n        'click .btn-add-trigger': 'onAddTrigger',\n    },\n\n    initialize: function() {\n        joint.dia.ElementView.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, 'change:embeds', this.layoutChildren, this);\n    },\n\n    layoutChildren: function() {\n        this.layoutModifiers();\n        this.layoutTriggers();\n    },\n\n    layoutTriggers: function() {\n        var options = this.model.get('triggers');\n        var optionHeight = this.model.get('optionHeight');\n        var offsetY = 70 + (this.model.get('options').length * optionHeight);\n        _.each(options, function(option) {\n            option.position(0, offsetY, {\n                parentRelative: true\n            });\n            offsetY += optionHeight;\n        }, this);\n    },\n\n    layoutModifiers: function() {\n        var options = this.model.get('options');\n        var optionHeight = this.model.get('optionHeight');\n        var offsetY = 50;\n        _.each(options, function(option) {\n            option.position(0, offsetY, {\n                parentRelative: true\n            });\n            offsetY += optionHeight;\n        }, this);\n    },\n\n    onAddTrigger: function() {\n        this.model.addTrigger()\n    },\n    onAddModifier: function() {\n        this.model.addModifier();\n    },\n\n});\n","var app = app || {};\n\napp.Selection = Backbone.Collection.extend();\n\napp.SelectionView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.options = options;\n        _.bindAll(this, 'render');\n        this.listenTo(this.model, 'add reset change', this.render);\n        this.listenTo(this.model, 'remove', this.remove);\n    },\n\n    render: function() {\n\n        var paper = this.options.paper;\n\n        var boxTemplate = V('rect', {\n            fill: 'none',\n            'stroke': '#C6C7E2',\n            'stroke-width': 1,\n            'pointer-events': 'none'\n        });\n\n        //remove any existing boxes\n        _.invoke(this.boxes, 'remove');\n        this.boxes = [];\n\n        this.model.each(function(element) {\n            var box = boxTemplate.clone();\n            var p = 3; // Box padding.\n            box.attr(g.rect(_.extend({}, element.get('position'), element.get('size'))).moveAndExpand({\n                x: -p,\n                y: -p,\n                width: 2 * p,\n                height: 2 * p\n            }));\n            V(paper.viewport).append(box);\n            this.boxes.push(box);\n        }, this);\n\n        return this;\n    }\n});\n","var app = app || {};\n\napp.Factory = {\n\n    createStateFromParams: function(params) {\n        var state = {\n            obs: {},\n            initial_state: false\n        }\n        return state;\n    },\n\n    createModifierFromParams: function(type, params) {\n        var modifier = {\n            type: type || '',\n            params: params || {}\n        }\n        return modifier;\n    },\n\n    createModifierTypeOb: function(time_limit, transition_type, start_time, end_time, relative_amount) {\n        return this.createModifierFromParams(\"Ob\", {\n            \"time_limit\": time_limit || 10,\n            \"transition_type\": transition_type || \"linear\",\n            \"start_time\": start_time || 0,\n            \"end_time\": end_time || 10,\n            \"relative_amount\": relative_amount || 0,\n        });\n    },\n\n    createTriggerFromParams: function(type, params) {\n        var trigger = {\n            type: type || '',\n            params: params || {}\n        }\n        return trigger;\n    },\n\n    createTriggerTypeTimeLimit: function(time_limit, linked_state) {\n        return this.createTriggerFromParams(\"TimeLimit\", {\n            \"time_limit\": time_limit || 10,\n            \"linked_state\": linked_state || ''\n        });\n    },\n\n    createTriggerTypeGiveDrug: function(comparison, drug, dose, dose_unit, linked_state) {\n        return this.createTriggerFromParams(\"GiveDrug\", {\n            \"comparison\": comparison || '',\n            \"drug\": drug || '',\n            \"dose\": dose || 0,\n            \"dose_unit\": dose_unit || '',\n            \"linked_state\": linked_state || ''\n        });\n    },\n\n    createTrigger: function(id, name) {\n\n        var q = new joint.shapes.qad.Trigger({\n            id: 'trigger-' + id,\n            attrs: {\n                '.trigger-text': {\n                    text: name\n                }\n            },\n            ports: {\n                groups: {\n                    'out': {\n                        position: 'right',\n                        attrs: {\n                            circle: {\n                                magnet: true,\n                                fill: '#feb663',\n                                r: 14\n                            }\n                        }\n                    }\n                },\n                items: [{\n                    id: 'trigger-port-' + id,\n                    group: 'out',\n                    args: {},\n                }]\n            },\n            trigger_data: app.Factory.createTriggerFromParams()\n        });\n        return q;\n    },\n\n    createModifier: function(id, name) {\n        var q = new joint.shapes.qad.Modifier({\n            id: 'option-' + id,\n            attrs: {\n                '.option-text': {\n                    text: name\n                }\n            },\n            modifier_data: app.Factory.createModifierFromParams()\n        });\n        return q;\n    },\n\n    createQuestion: function(text) {\n        var q = new joint.shapes.qad.Question({\n            position: {\n                x: 400 - 50,\n                y: 30\n            },\n            size: {\n                width: 100,\n                height: 70\n            },\n            question: text,\n            inPorts: [{\n                id: 'in',\n                label: 'In'\n            }],\n            options: [],\n            triggers: [],\n            state_data: app.Factory.createStateFromParams(text)\n        });\n        return q;\n    },\n\n    createLink: function(source, target) {\n\n        return new joint.dia.Link({\n            source: {\n                id: source\n            },\n            target: {\n                id: target\n            },\n            attrs: {\n                '.marker-target': {\n                    d: 'M 10 0 L 0 5 L 10 10 z',\n                    fill: '#6a6c8a',\n                    stroke: '#6a6c8a'\n                },\n                '.connection': {\n                    stroke: '#6a6c8a',\n                    'stroke-width': 2\n                }\n            }\n        });\n    },\n\n};\n","// @import jquery.js\n// @import lodash.js\n// @import backbone.js\n// @import geometry.js\n// @import vectorizer.js\n// @import joint.clean.js\n// @import joint.shapes.qad.js\n// @import selection.js\n// @import factory.js\n// @import snippet.js\n\nvar app = app || {};\nvar qad = window.qad || {};\n\napp.dictionary = {\n    \"ob_names\": {\n        \"heart_rate\": \"Heart rate\",\n        \"foot_smell\": \"Foot smell\",\n        \"hair_loss\": \"Hair loss\",\n    }\n}\n\napp.AppView = Backbone.View.extend({\n\n    el: '#app',\n\n    events: {\n        'click #add-state': 'addState',\n        'click #save-scenario': 'saveScenario',\n    },\n\n    initialize: function() {\n        this.initializePaper();\n        this.initializeSelection();\n        //this.initializeHalo();\n        //this.initializeInlineTextEditor();\n        this.initializeTooltips();\n    },\n\n    initializeTooltips: function() {\n\n        new joint.ui.Tooltip({\n            rootTarget: '#paper',\n            target: '.element',\n            content: _.bind(function(element) {\n\n                var cellView = this.paper.findView(element);\n                var cell = cellView.model;\n\n                var t = '- Double-click to edit text inline.';\n                if (cell.get('type') === 'qad.Question') {\n                    t += '<br/><br/>- Connect a port with another Question or an Answer.';\n                }\n\n                return t;\n\n            }, this),\n            direction: 'right',\n            right: '#paper',\n            padding: 20\n        });\n    },\n\n    initializeHalo: function() {\n\n        this.paper.on('cell:pointerup', function(cellView, evt) {\n\n            if (cellView.model instanceof joint.dia.Link) return;\n\n            var halo = new joint.ui.Halo({\n                graph: this.graph,\n                paper: this.paper,\n                cellView: cellView,\n                useModelGeometry: true,\n                type: 'toolbar'\n            });\n\n            // As we're using the FreeTransform plugin, there is no need for an extra resize tool in Halo.\n            // Therefore, remove the resize tool handle and reposition the clone tool handle to make the\n            // handles nicely spread around the elements.\n            halo.removeHandle('resize');\n            halo.removeHandle('rotate');\n            halo.removeHandle('fork');\n            halo.removeHandle('link');\n            //halo.changeHandle('clone', { position: 'se' });\n\n            halo.on('action:remove:pointerdown', function() {\n                this.selection.reset();\n            }, this);\n\n            halo.render();\n\n        }, this);\n    },\n\n    initializeSelection: function() {\n\n        var selection = this.selection = new app.Selection;\n\n        new app.SelectionView({\n            model: selection,\n            paper: this.paper\n        });\n\n        this.listenTo(this.paper, 'cell:pointerup', function(cellView) {\n            if (!cellView.model.isLink()) {\n                selection.reset([cellView.model]);\n            }\n        });\n\n        this.listenTo(this.paper, 'blank:pointerdown', function() {\n            selection.reset([]);\n        });\n\n        this.listenTo(selection, 'add reset', this.onSelectionChange);\n\n        /* my editor view */\n        app.editor = {\n            triggers: {},\n            modifiers: {},\n        };\n\n        app.editor.StateView = Backbone.View.extend({\n            el: \"#element-type\",\n            initialize: function() {\n                this.template = _.template($('#state-parameters-template').html());\n                this.render();\n            },\n            events: {\n                \"keyup .ob-value\": \"onObValueChange\",\n                \"change #ob-select\": \"onObChange\",\n                \"keyup #state-name\": \"onTriggerNameChange\",\n                \"click #initial-state-check\": \"onInitialStateClicked\",\n            },\n            onInitialStateClicked: function(evt) {\n                state_cells = app.helpers.get_states(this.model.graph);\n                state_cells.forEach(function(state) {\n                    state.disableInitialState();\n                });\n                if ($(evt.currentTarget).is(':checked')) this.model.enableInitialState();\n            },\n            onObValueChange: function(evt) {\n                var current_obs = this.model.getStateParams().state_data.obs;\n                var edited_ob_key = $(evt.currentTarget).data('obKey');\n                current_obs[edited_ob_key] = evt.currentTarget.value;\n            },\n            onObChange: function(evt) {\n                var current_obs = this.model.getStateParams().state_data.obs;\n                var selected_ob = $(evt.currentTarget.selectedOptions[0]);\n                var selected_ob_key = evt.currentTarget.value;\n\n                if (current_obs[selected_ob_key]) {\n                    $(\"#ob-value-\" + selected_ob_key).focus();\n                } else {\n                    current_obs[selected_ob_key] = selected_ob.data('defaultValue');\n                    this.render();\n                }\n\n            },\n            onTriggerNameChange: function(evt) {\n                this.model.attr(\".question-text\", {\n                    text: evt.currentTarget.value\n                });\n            },\n            render: function() {\n                this.$el.html(this.template(this.model.getStateParams()));\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n        app.editor.ModifierView = Backbone.View.extend({\n            el: \"#element-type\",\n            events: {\n                \"change #modifier-type\": \"onModifierTypeChange\",\n            },\n            onModifierTypeChange: function(evt) {\n                if (evt.currentTarget.value != '') {\n                    var new_data = window[\"app\"][\"Factory\"][\"createModifierType\" + evt.currentTarget.value]();\n                    this.model.set('modifier_data', new_data);\n                    this.createParametersView();\n                }\n            },\n            createParametersView: function(type) {\n                if (this.parameterView) this.parameterView.remove();\n                this.parameterView = new window[\"app\"][\"editor\"][\"modifiers\"][this.model.getModifierParams().modifier_data.type + \"View\"]({\n                    model: this.model.getModifierParams()\n                });\n            },\n            initialize: function() {\n                this.template = _.template($('#modifier-type-template').html());\n                this.render();\n            },\n            render: function() {\n                this.$el.html(this.template(this.model.getModifierParams()));\n                if (this.model.getModifierParams().modifier_data.type != '') this.createParametersView();\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n        app.editor.EditableModifierView = Backbone.View.extend({\n            storeChangedValue: function(evt) {\n                this.model.modifier_data.params[evt.currentTarget.id] = evt.currentTarget.value;\n            },\n        });\n\n        app.editor.modifiers.ObView = app.editor.EditableModifierView.extend({\n            el: \"#modifier-parameters\",\n            events: {\n                \"change .select-value-change\": \"storeChangedValue\",\n                \"keyup .keypress-value-change\": \"storeChangedValue\",\n            },\n            initialize: function() {\n                this.template = _.template($('#modifier-type-ob-template').html());\n                this.render();\n            },\n            render: function() {\n                this.$el.html(this.template(this.model));\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n        app.editor.TriggerView = Backbone.View.extend({\n            el: \"#element-type\",\n            events: {\n                \"change #trigger-type\": \"onTriggerTypeChange\",\n                \"change #trigger-name\": \"onTriggerNameChange\",\n                \"keyup #trigger-name\": \"onTriggerNameChange\",\n            },\n            initialize: function() {\n                this.template = _.template($('#trigger-type-template').html());\n                this.render();\n            },\n            render: function() {\n                this.$el.html(this.template(this.model.getTriggerParams()));\n                if (this.model.getTriggerParams().trigger_data.type != '') this.createParametersView();\n            },\n            createParametersView: function(type) {\n                if (this.parameterView) this.parameterView.remove();\n                this.parameterView = new window[\"app\"][\"editor\"][\"triggers\"][this.model.getTriggerParams().trigger_data.type + \"View\"]({\n                    model: this.model.getTriggerParams()\n                });\n            },\n            onTriggerTypeChange: function(evt) {\n                if (evt.currentTarget.value != '') {\n                    var new_data = window[\"app\"][\"Factory\"][\"createTriggerType\" + evt.currentTarget.value]();\n                    this.model.set('trigger_data', new_data);\n                    this.createParametersView();\n                }\n            },\n            onTriggerNameChange: function(evt) {\n                this.model.attr(\".trigger-text\", {\n                    text: evt.currentTarget.value\n                });\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n\n        //Trigger classes\n        app.editor.EditableTriggerView = Backbone.View.extend({\n            storeChangedValue: function(evt) {\n                this.model.trigger_data.params[evt.currentTarget.id] = evt.currentTarget.value;\n            },\n        });\n\n        app.editor.triggers.TimeLimitView = app.editor.EditableTriggerView.extend({\n            el: \"#trigger-parameters\",\n            events: {\n                \"keyup #time_limit\": \"storeChangedValue\",\n            },\n            initialize: function() {\n                this.template = _.template($('#trigger-type-time-limit-template').html());\n                this.render();\n            },\n            render: function() {\n                this.$el.html(this.template(this.model));\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n        app.editor.triggers.GiveDrugView = app.editor.EditableTriggerView.extend({\n            el: \"#trigger-parameters\",\n            events: {\n                \"change #drug\": \"storeChangedValue\",\n                \"change #dose_unit\": \"storeChangedValue\",\n                \"change #comparison\": \"storeChangedValue\",\n                \"keyup #dose\": \"storeChangedValue\",\n            },\n            initialize: function() {\n                this.template = _.template($('#trigger-type-give-drug-template').html());\n                this.render();\n            },\n            render: function() {\n                this.$el.html(this.template(this.model));\n            },\n            remove: function() {\n                this.$el.empty().off();\n                this.stopListening();\n                return this;\n            }\n        });\n\n\n    },\n\n    //Each trigger, modifier or whatever is going to have its own logic when it comes to how it manipulates the \n    //data model of the selected element, therefore, each one will live in its own separate view\n    onSelectionChange: function(collection) {\n        var cell = collection.first();\n        if (cell) {\n            var view_type_class;\n            switch (cell.get('type')) {\n                case 'qad.Trigger':\n                    view_type_class = app.editor.TriggerView;\n                    break;\n                case 'qad.Question':\n                    view_type_class = app.editor.StateView;\n                    break;\n                case 'qad.Modifier':\n                    view_type_class = app.editor.ModifierView;\n            }\n\n            if (view_type_class) {\n                //Cleanup parent view if required\n                if (this.parent_view) this.parent_view.remove();\n                this.parent_view = new view_type_class({\n                    model: collection.first()\n                })\n            };\n\n        } else {\n            this.status('Selection emptied.');\n        }\n    },\n\n    initializePaper: function() {\n\n        this.graph = new joint.dia.Graph;\n\n        this.paper = new joint.dia.Paper({\n            el: this.$('#paper'),\n            model: this.graph,\n            width: 800,\n            height: 600,\n            gridSize: 10,\n            snapLinks: {\n                radius: 50\n            },\n            validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n                if (magnetS.getAttribute('port-group') !== magnetT.getAttribute('port-group')) return true;\n                return false;\n            },\n            validateMagnet: function(cellView, magnet) {\n                if (magnet.getAttribute('port-group') == 'out') return true;\n                return false;\n            },\n            defaultLink: new joint.dia.Link({\n                router: {\n                    name: 'metro'\n                },\n                connector: {\n                    name: 'rounded'\n                },\n                attrs: {\n                    '.marker-target': {\n                        d: 'M 10 0 L 0 5 L 10 10 z',\n                        fill: '#6a6c8a',\n                        stroke: '#6a6c8a'\n                    },\n                    '.connection': {\n                        stroke: '#6a6c8a',\n                        'stroke-width': 2\n                    }\n                }\n            })\n        });\n    },\n\n\n    // Show a message in the statusbar.\n    status: function(m) {\n        this.$('#statusbar .message').text(m);\n    },\n\n    addState: function() {\n        var q = app.Factory.createQuestion('Question');\n        this.graph.addCell(q);\n        this.status('Question added.');\n    },\n\n    saveScenario: function() {\n        console.log(app.helpers.export_to_scenario_json(this.graph));\n    },\n\n    clear: function() {\n        this.graph.clear();\n    },\n\n});\n","var app = app || {};\n\napp.helpers = {\n    export_to_scenario_json: function(graph) {\n\n        var export_data = {\n            \"starting_state\": \"not_yet_set\",\n            \"states\": {}\n        };\n\n        //Get list of links for lookup when adding triggers\n        var graph_links = graph.getLinks();\n        var link_lookup = {};\n\n        for (var link_count = 0; link_count < graph_links.length; link_count++) {\n            var link = graph_links[link_count];\n            link_lookup[link.get('source').id] = link.get('target').id;\n        }\n\n        var state_cells = app.helpers.get_states(graph);\n        for (var state_count = 0; state_count < state_cells.length; state_count++) {\n\n            var state = state_cells[state_count];\n            export_data.states[state.id] = {\n                \"obs\": state.getStateParams().state_data.obs,\n                \"triggers\": {},\n                \"modifiers\": {}\n            };\n\n            //Store the id of the starting state\n            if (state.getStateParams().state_data.initial_state) export_data.starting_state = state.id;\n\n            var state_triggers = state.get('triggers');\n            for (var trigger_count = 0; trigger_count < state_triggers.length; trigger_count++) {\n                var trigger = state_triggers[trigger_count];\n                var trigger_data = trigger.getTriggerParams().trigger_data;\n                if (link_lookup[trigger.id]) trigger_data.params[\"linked_state\"] = link_lookup[trigger.id];\n                export_data.states[state.id].triggers[trigger.id] = trigger_data;\n            }\n\n            var state_modifiers = state.get('options');\n            for (var modifier_count = 0; modifier_count < state_modifiers.length; modifier_count++) {\n                var modifier = state_modifiers[modifier_count];\n                var modifier_data = modifier.getModifierParams().modifier_data;\n                export_data.states[state.id].modifiers[modifier.id] = modifier_data;\n            }\n\n        }\n\n        console.log(export_data);\n\n    },\n\n    get_states: function(graph) {\n        var state_cells = [];\n        var graph_cells = graph.getCells();\n        for (var cell_count = 0; cell_count < graph_cells.length; cell_count++) {\n            var state = graph_cells[cell_count];\n            if (state.get('type') == 'qad.Question') {\n                state_cells.push(state);\n            }\n\n        }\n        return state_cells;\n    }\n}\n","var app = app || {};\n\n$(function() {\n\n    joint.dia.Element.define('qad.Trigger', {\n        attrs: {\n            '.btn-remove-trigger': {\n                'x-alignment': 10,\n                'y-alignment': 13,\n                cursor: 'pointer',\n                fill: 'black'\n            },\n            '.trigger-rect': {\n                fill: '#777777',\n                stroke: 'none',\n                width: 100,\n                height: 60,\n            },\n            '.trigger-text': {\n                'font-size': 11,\n                fill: 'white',\n                'y-alignment': .7,\n                'x-alignment': 40\n            }\n        }\n    }, {\n        markup: $.trim($(\"#trigger-template\").html()),\n        getTriggerParams: function() {\n            return {\n                trigger_data: this.get('trigger_data'),\n                model_name: this.get('attrs')['.trigger-text'].text\n            }\n        }\n    });\n\n    joint.dia.Element.define('qad.Modifier', {\n        attrs: {\n            '.btn-remove-modifier': {\n                'x-alignment': 10,\n                'y-alignment': 13,\n                cursor: 'pointer',\n                fill: 'black'\n            },\n            '.option-rect': {\n                fill: '#777777',\n                stroke: 'none',\n                width: 100,\n                height: 60,\n            },\n            '.option-text': {\n                'font-size': 11,\n                fill: 'white',\n                'y-alignment': .7,\n                'x-alignment': 40\n            }\n        }\n    }, {\n        markup: $.trim($(\"#modifier-template\").html()),\n        getModifierParams: function() {\n            return {\n                modifier_data: this.get('modifier_data'),\n                model_name: this.get('attrs')['.option-text'].text\n            }\n        }\n    });\n\n    joint.dia.Element.define('qad.Question', {\n\n        optionHeight: 30,\n        questionHeight: 50,\n        paddingBottom: 20,\n        minWidth: 150,\n        ports: {\n            groups: {\n                'in': {\n                    position: 'top',\n                    attrs: {\n                        circle: {\n                            magnet: true,\n                            stroke: 'white',\n                            fill: '#feb663',\n                            r: 14\n                        },\n                        text: {\n                            'pointer-events': 'none',\n                            'font-size': 12,\n                            fill: 'white'\n                        }\n                    },\n                    label: {\n                        position: {\n                            name: 'left',\n                            args: {\n                                x: 5\n                            }\n                        }\n                    }\n                }\n            },\n            items: [{\n                group: 'in',\n                attrs: {\n                    text: {\n                        text: 'in'\n                    }\n                }\n            }]\n        },\n        attrs: {\n            '.': {\n                magnet: false\n            },\n            '.options': {\n                ref: '.body',\n                'ref-x': 0\n            },\n            '.body': {\n                width: 150,\n                height: 250,\n                rx: '1%',\n                ry: '2%',\n                stroke: 'none',\n                fill: {\n                    type: 'linearGradient',\n                    stops: [{\n                        offset: '0%',\n                        color: '#FEB663'\n                    }, {\n                        offset: '100%',\n                        color: '#31D0C6'\n                    }],\n                    // Top-to-bottom gradient.\n                    attrs: {\n                        x1: '0%',\n                        y1: '0%',\n                        x2: '0%',\n                        y2: '100%'\n                    }\n                }\n            },\n            '.btn-add-modifier': {\n                ref: '.body',\n                'ref-x': 10,\n                'ref-dy': -22,\n                cursor: 'pointer',\n                fill: 'white'\n            },\n            '.btn-add-trigger': {\n                ref: '.body',\n                refX: 40,\n                refDy: -22,\n                cursor: 'pointer',\n                fill: 'blue'\n            },\n            '.btn-remove-trigger': {\n                'x-alignment': 10,\n                'y-alignment': 13,\n                cursor: 'pointer',\n                fill: 'white'\n            },\n            '.triggers': {\n                ref: '.body',\n                'ref-x': 0\n            },\n            // Text styling.\n            text: {\n                'font-family': 'Arial'\n            },\n            '.question-text': {\n                fill: 'white',\n                refX: '50%',\n                refY: 15,\n                'font-size': 15,\n                'text-anchor': 'middle',\n                style: {\n                    'text-shadow': '1px 1px 0px gray'\n                }\n            },\n\n            // Options styling.\n            '.trigger-bg-rect': {\n                rx: 3,\n                ry: 3,\n                stroke: 'white',\n                'stroke-width': 1,\n                'stroke-opacity': .5,\n                'fill-opacity': .5,\n                fill: 'green',\n                ref: '.body',\n                'ref-width': 1\n            }\n\n        }\n    }, {\n\n        //refactor this to common class functions\n        getStateParams: function() {\n            return {\n                state_data: this.get('state_data'),\n                model_name: this.get('attrs')[\".question-text\"].text\n            };\n        },\n        disableInitialState: function() {\n            var state_data = JSON.parse(JSON.stringify(this.get('state_data')));\n            state_data.initial_state = false;\n            this.attr('.body', {\n                width: 150,\n                height: 250,\n                rx: '1%',\n                ry: '2%',\n                stroke: 'none',\n                fill: {\n                    type: 'linearGradient',\n                    stops: [{\n                        offset: '0%',\n                        color: '#FEB663'\n                    }, {\n                        offset: '100%',\n                        color: '#31D0C6'\n                    }],\n                    // Top-to-bottom gradient.\n                    attrs: {\n                        x1: '0%',\n                        y1: '0%',\n                        x2: '0%',\n                        y2: '100%'\n                    }\n                }\n            });\n            this.set('state_data', state_data);\n        },\n        enableInitialState: function() {\n            var state_data = JSON.parse(JSON.stringify(this.get('state_data')));\n            state_data.initial_state = true;\n            this.attr('.body', {\n                width: 150,\n                height: 250,\n                rx: '1%',\n                ry: '2%',\n                stroke: 'none',\n                fill: {\n                    type: 'linearGradient',\n                    stops: [{\n                        offset: '0%',\n                        color: '#000000'\n                    }, {\n                        offset: '100%',\n                        color: '#31D0C6'\n                    }],\n                    // Top-to-bottom gradient.\n                    attrs: {\n                        x1: '0%',\n                        y1: '0%',\n                        x2: '0%',\n                        y2: '100%'\n                    }\n                }\n            });\n            this.set('state_data', state_data);\n        },\n\n        markup: $.trim($(\"#question-template\").html()),\n\n        optionMarkup: $.trim($(\"#modifier-template\").html()),\n\n        triggerMarkup: $.trim($(\"#trigger-template\").html()),\n\n        initialize: function() {\n            joint.dia.Element.prototype.initialize.apply(this, arguments);\n            this.listenTo(this, 'change:options', this.autoresize, this);\n            this.listenTo(this, 'change:triggers', this.autoresize, this);\n            this.on('change:question', function() {\n                this.attr('.question-text/text', this.get('question') || '');\n                this.autoresize();\n            }, this);\n            this.on('change:questionHeight', function() {\n                this.attr('.options/ref-y', this.get('questionHeight'), {\n                    silent: true\n                });\n                this.autoresize();\n            }, this);\n            this.on('change:optionHeight', this.autoresize, this);\n            this.attr('.options/ref-y', this.get('questionHeight'), {\n                silent: true\n            });\n            this.attr('.question-text/text', this.get('question'), {\n                silent: true\n            });\n        },\n\n        onChangeTriggers: function() {\n            //Get values from model to keep code get() free\n            /*var triggers = this.get('triggers');\n              var optionHeight = this.get('optionHeight');\n              var attrs = this.get('attrs');\n              var questionHeight = this.get('questionHeight');\n              var offsetY = (this.get('options').length * optionHeight) + ((this.get('options').length > 0) ? 70 : 50);\n              var attrsUpdate = {};*/\n\n            //iterate attributes for each selector\n            _.each(attrs, function(attrs, selector) {\n                if (attrs.dynamicmodifier) {\n                    this.removeAttr(selector, {\n                        silent: true\n                    });\n                }\n            }, this);\n\n            // Collect new attrs for the new options - marking them as dynamicmodifier for potential cleanup\n            _.each(triggers, function(trigger) {\n\n                var selector = '.trigger-' + trigger.id;\n\n                attrsUpdate[selector] = {\n                    transform: 'translate(0, ' + offsetY + ')',\n                    dynamicmodifier: true\n                };\n                attrsUpdate[selector + ' .trigger-bg-rect'] = {\n                    height: optionHeight,\n                    dynamicmodifier: true\n                };\n                attrsUpdate[selector + ' .option-text'] = {\n                    text: trigger.text,\n                    dynamicmodifier: true\n                };\n\n                offsetY += optionHeight;\n                var portY = offsetY - optionHeight / 2; // + questionHeight;\n                if (!this.getPort(trigger.id)) {\n                    this.addPort({\n                        group: 'out',\n                        id: trigger.id,\n                        args: {\n                            y: portY\n                        }\n                    });\n                } else {\n                    this.portProp(trigger.id, 'args/y', portY);\n                }\n\n            }, this);\n\n            this.attr(attrsUpdate);\n        },\n\n        autoresize: function() {\n            var options = this.get('options');\n            var triggers = this.get('triggers');\n            var gap = this.get('paddingBottom') || 20;\n            var height = options.length * this.get('optionHeight') + this.get('questionHeight') + gap;\n            height += triggers.length * this.get('optionHeight') + (gap * 2);\n            var width = joint.util.measureText(this.get('question'), {\n                fontSize: this.attr('.question-text/font-size')\n            }).width;\n            this.resize(Math.max(this.get('minWidth') || 150, width), height);\n        },\n\n        addModifier: function() {\n            var new_modifier = app.Factory.createModifier(_.uniqueId(), \"Modifier \" + this.get('options').length);\n            this.addElementToStore('options', new_modifier);\n            this.graph.addCell(new_modifier);\n            this.embed(new_modifier);\n        },\n        addTrigger: function() {\n            var new_trigger = app.Factory.createTrigger(_.uniqueId(), \"Trigger \" + this.get('triggers').length);\n            this.addElementToStore('triggers', new_trigger);\n            this.graph.addCell(new_trigger);\n            this.embed(new_trigger);\n        },\n        removeElementById: function(id, storage_key) {\n            data_store = this.get(storage_key);\n            this.removePort(id);\n            data_store = _.without(data_store, _.findWhere(data_store, {\n                id: id\n            }));\n            return data_store;\n        },\n        removeModifier: function(id) {\n            this.set('options', this.removeElementById(id, 'options'));\n        },\n        removeTrigger: function(id) {\n            this.set('triggers', this.removeElementById(id, 'triggers'))\n        },\n        addElementToStore: function(storage_key, item) {\n            this.set(storage_key, this.get(storage_key).concat(item));\n        }\n    });\n\n    window.appView = new app.AppView;\n\n});\n",""]}